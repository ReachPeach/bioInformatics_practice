#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

const int BLOSUM62[20][20] = {
        {4,  0,  -2, -1, -2, 0,  -2, -1, -1, -1, -1, -2, -1, -1, -1, 1,  0,  0,  -3, -2},
        {0,  9,  -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2},
        {-2, -3, 6,  2,  -3, -1, -1, -3, -1, -4, -3, 1,  -1, 0,  -2, 0,  -1, -3, -4, -3},
        {-1, -4, 2,  5,  -3, -2, 0,  -3, 1,  -3, -2, 0,  -1, 2,  0,  0,  -1, -2, -3, -2},
        {-2, -2, -3, -3, 6,  -3, -1, 0,  -3, 0,  0,  -3, -4, -3, -3, -2, -2, -1, 1,  3},
        {0,  -3, -1, -2, -3, 6,  -2, -4, -2, -4, -3, 0,  -2, -2, -2, 0,  -2, -3, -2, -3},
        {-2, -3, -1, 0,  -1, -2, 8,  -3, -1, -3, -2, 1,  -2, 0,  0,  -1, -2, -3, -2, 2},
        {-1, -1, -3, -3, 0,  -4, -3, 4,  -3, 2,  1,  -3, -3, -3, -3, -2, -1, 3,  -3, -1},
        {-1, -3, -1, 1,  -3, -2, -1, -3, 5,  -2, -1, 0,  -1, 1,  2,  0,  -1, -2, -3, -2},
        {-1, -1, -4, -3, 0,  -4, -3, 2,  -2, 4,  2,  -3, -3, -2, -2, -2, -1, 1,  -2, -1},
        {-1, -1, -3, -2, 0,  -3, -2, 1,  -1, 2,  5,  -2, -2, 0,  -1, -1, -1, 1,  -1, -1},
        {-2, -3, 1,  0,  -3, 0,  1,  -3, 0,  -3, -2, 6,  -2, 0,  0,  1,  0,  -3, -4, -2},
        {-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2, 7,  -1, -2, -1, -1, -2, -4, -3},
        {-1, -3, 0,  2,  -3, -2, 0,  -3, 1,  -2, 0,  0,  -1, 5,  1,  0,  -1, -2, -2, -1},
        {-1, -3, -2, 0,  -3, -2, 0,  -3, 2,  -2, -1, 0,  -2, 1,  5,  -1, -1, -3, -3, -2},
        {1,  -1, 0,  0,  -2, 0,  -1, -2, 0,  -2, -1, 1,  -1, 0,  -1, 4,  1,  -2, -3, -2},
        {0,  -1, -1, -1, -2, -2, -2, -1, -1, -1, -1, 0,  -1, -1, -1, 1,  5,  0,  -2, -2},
        {0,  -1, -3, -2, -1, -3, -3, 3,  -2, 1,  1,  -3, -2, -2, -3, -2, 0,  4,  -3, -1},
        {-3, -2, -4, -3, 1,  -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11, 2},
        {-2, -2, -3, -2, 3,  -3, 2,  -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1, 2,  7}
};
map<char, int> num = {
        {'A', 0},
        {'C', 1},
        {'D', 2},
        {'E', 3},
        {'F', 4},
        {'G', 5},
        {'H', 6},
        {'I', 7},
        {'K', 8},
        {'L', 9},
        {'M', 10},
        {'N', 11},
        {'P', 12},
        {'Q', 13},
        {'R', 14},
        {'S', 15},
        {'T', 16},
        {'V', 17},
        {'W', 18},
        {'Y', 19}
};

#define dist(a, b) BLOSUM62[num[a]][num[b]]

void LCS(const string &s, const string &t) {
    int n = s.size(), m = t.size();
    vector<vector<int>> lcs(n + 1, vector<int>(m + 1, 0));
    int d = -11;
    for (int i = 0; i <= n; i++) lcs[i][0] = 0;
    for (int i = 0; i <= m; i++) lcs[0][i] = 0;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {

            int maxk = 0;
            for (int k = 1; k <= i; k++) maxk = max(maxk, lcs[i - k][j] - (11 + k - 1));

            int maxl = 0;
            for (int l = 1; l <= j; l++) maxl = max(maxl, lcs[i][j - l] - (11 + l - 1));

            lcs[i][j] = max(max(lcs[i - 1][j - 1] + dist(s[i - 1], t[j - 1]), 0),
                            max(maxl, maxk));
        }
    }
    cout << lcs[n][m];

    string ansA, ansB;
    while (n > 0 && m > 0) {
        if (lcs[n][m] == lcs[n - 1][m - 1] + dist(s[n - 1], t[m - 1])) {
            ansA = s[n - 1] + ansA;
            ansB = t[m - 1] + ansB;
            n--;
            m--;
        } else {
            bool ex = false;
            for (int i = 1; i <= n; i++) {
                if (lcs[n][m] == lcs[n - i][m] - (11 + i - 1)) {
                    for (int k = 1; k <= i; k++) {
                        ansA = s[n - 1] + ansA;
                        ansB = '-' + ansB;
                        n--;
                        ex = true;
                    }
                    if (ex) break;
                }
            }
            if (!ex) {
                for (int j = 1; j <= m; j++) {
                    if (lcs[n][m] == lcs[n][m - j] - (11 + j - 1)) {
                        for (int k = 1; k <= j; k++) {
                            ansA = '-' + ansA;
                            ansB = t[m - 1] + ansB;
                            m--;
                            ex = true;
                        }
                        if (ex) break;
                    }
                }
            }
        }
    }
    while (n > 0) {
        ansA = s[n - 1] + ansA;
        ansB = '-' + ansB;
        n--;
    }
    while (m > 0) {
        ansA = '-' + ansA;
        ansB = t[m - 1] + ansB;
        m--;
    }
    cout << '\n' << ansA << '\n' << ansB;
}

int main() {
    freopen("../inputs/test.in", "r", stdin);
    freopen("test.out", "w", stdout);
    string s, t;
    cin >> s >> t;
    LCS(s, t);
    return 0;
}
